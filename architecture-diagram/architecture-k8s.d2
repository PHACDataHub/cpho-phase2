direction: down

unauthed-traffic: Unauthenticated\napp traffic {
  icon: ./icons/general/person.svg
  shape: image
  style: {
    font-color: red
  }
}

active-directory: Health Canada's\nAzure Active Directory\nsign in page {
  icon: ./icons/general/Azure-Active-Directory.svg
  shape: image
}

authed-traffic: Authenticated\napp traffic {
  icon: ./icons/general/person.svg
  shape: image
  style: {
    font-color: green
  }
}

letsencrypt: Let's Encrypt {
  icon: ./icons/letsencrypt/logo.svg
  shape: image
}

slack: Slack alerts\nchannel {
  icon: ./icons/general/Slack_icon_2019.svg
  shape: image
}

devs: Developers {
  icon: ./icons/general/Developer_(94088)_-_The_Noun_Project.svg
  shape: image
}

gh: GitHub {
  icon: ./icons/github/logo.svg
  shape: image
}

gcp: PHAC Google Cloud Org {
  icon: ./icons/gcp/logo.svg
  style: {
    stroke: "#000000"
    fill: "#f1f3f4"
  }

  project: HoPiC Google Cloud Project {
    icon: ./icons/general/folder.svg
    style: {
      stroke: "#ffffff"
      fill: "#e1f6fe"
    }

    clouddns: Cloud DNS {
      icon: ./icons/gcp/cloud_dns.svg
      shape: image
    }

    region: northamerica-northeast1 GCP Region (Montreal) {
      icon: ./icons/gcp/virtual_private_cloud.svg
      style: {
        stroke: grey
        font-color: blue
        stroke-dash: 3
        fill: transparent
      }

      loadbalancer: Regional\nHTTPS Application\nLoad Balancer {
        icon: ./icons/gcp/cloud_load_balancer.svg
        shape: image
      }

      cloudarmor: Cloud Armor \nWAF Policies {
        icon: ./icons/gcp/cloud_armor.svg
        shape: image
      }

      vpc: VPC / Regional Subnet - 10.162.0.0/20 {
        icon: ./icons/gcp/virtual_private_cloud.svg
        style: {
          stroke: blue
          font-color: blue
          stroke-dash: 3
          fill: transparent
        }

        fw: VPC Firewall {
          icon: ./icons/gcp/cloud_firewall_rules.svg
          style: {
            stroke: black
            font-color: black
            stroke-dash: 3
            fill: transparent
          }

          k8s: Google Kubernetes Engine Autopilot Cluster/Managed PaaS with ASM {
            icon: ./icons/gcp/anthos_service_mesh.svg
            style: {
              stroke: blue
              font-color: blue
              fill: transparent
            }

            cert-manager: cert-manager {
              icon: ./icons/kubernetes/ns.svg
              style: {
                stroke: brown
                stroke-dash: 10
                font-color: blue
                fill: transparent
              }

              certmanager-op: Cert Manager {
                icon: ./icons/certmanager/logo.svg
                shape: image
              }
            }

            istio_ingress: istio-ingress\nnamespace {
              icon: ./icons/kubernetes/ns.svg
              style: {
                stroke: brown
                stroke-dash: 10
                font-color: blue
                fill: transparent
              }

              tls-cert: TLS Certificate Secret {
                icon: ./icons/kubernetes/secret.svg
                shape: image
              }

              ingress: Cluster Ingress Gateway,\nterminates client TLS,\nswitches to cluster internal\nmutual TLS network {
                icon: ./icons/kubernetes/pod.svg
                shape: image
              }
            }

            server: Functional component namespace {
              icon: ./icons/kubernetes/ns.svg
              style: {
                stroke: brown
                stroke-dash: 10
                font-color: blue
                fill: transparent
              }

              django: Django App {
                icon: ./icons/django/logo.svg
                style: {
                  stroke: "#000000"
                  fill: transparent
                }

                svc: App Service\n(pod load balancer) {
                  icon: ./icons/kubernetes/svc.svg
                  shape: image
                }

                deploy: Deployment {
                  icon: ./icons/kubernetes/deploy.svg
                  shape: image
                }

                hpa: Horizontal Pod Autoscaler\n(65% Mem / 64% CPU) {
                  icon: ./icons/kubernetes/hpa.svg
                  shape: image
                }

                app-secrets: App Secrets,\ninjected in containers\nas env vars at run-time {
                  icon: ./icons/kubernetes/secret.svg
                  shape: image
                }

                pods: Pods {
                  style: {
                    stroke: blue
                    font-color: blue
                    stroke-dash: 3
                    fill: transparent
                  }
                  pod1: App pod 1 {
                    icon: ./icons/kubernetes/pod.svg
                    shape: image
                  }
                  podN: App pod N {
                    icon: ./icons/kubernetes/pod.svg
                    shape: image
                  }
                }
              }

              pg: HA PostgreSQL Cluster {
                icon: ./icons/cloudnativepg/logo.svg
                style: {
                  stroke: "#000000"
                  fill: transparent
                }

                rw_svc: Connect to primary for rw {
                  icon: ./icons/kubernetes/svc.svg
                  shape: image
                }

                ro_svc: Connect to standby for ro {
                  icon: ./icons/kubernetes/svc.svg
                  shape: image
                }

                r_svc: Connect to any for ro {
                  icon: ./icons/kubernetes/svc.svg
                  shape: image
                }

                primary_boundary: Primary {
                  style: {
                    stroke: blue
                    font-color: blue
                    stroke-dash: 3
                    fill: transparent
                  }
                  pod: Primary {
                    icon: ./icons/kubernetes/pod.svg
                    shape: image
                  }
                  pvc: PV {
                    icon: ./icons/kubernetes/pv.svg
                    shape: image
                  }
                }

                standby_boundary: Standby 1 {
                  style: {
                    stroke: blue
                    font-color: blue
                    stroke-dash: 3
                    fill: transparent
                  }

                  pod: Standby {
                    icon: ./icons/kubernetes/pod.svg
                    shape: image
                  }

                  pvc: PV {
                    icon: ./icons/kubernetes/pv.svg
                    shape: image
                  }
                }
              }
            }

            flux_system: flux-system {
              icon: ./icons/kubernetes/ns.svg
              style: {
                stroke: brown
                stroke-dash: 10
                font-color: blue
                fill: transparent
              }

              flux: Flux GitOps operators,\nreconcile cluster\nconfiguration to\nsource of truth (GitHub) {
                icon: ./icons/flux/logo.svg
                shape: image
              }
            }

            cnpg_system: cnpg-system {
              icon: ./icons/kubernetes/ns.svg
              style: {
                stroke: brown
                stroke-dash: 10
                font-color: blue
                fill: transparent
              }

              cnpg_op: Cloudnative-PG Operator,\nprovisions and manages\ncluster postgres {
                icon: ./icons/cloudnativepg/logo.svg
                shape: image
              }
            }
          }
        }
      }

      cloudstorage: Cloud Storage {
        icon: ./icons/gcp/cloud_storage.svg
        shape: image
      }

      registry: Artifact Registry {
        icon: ./icons/gcp/artifact_registry.svg
        shape: image
      }

      cloud_build: Cloud Build {
        icon: ./icons/gcp/cloud_build.svg
        shape: image
      }
    }

    observability: Observability Solutions {
      style: {
        stroke: transparent
        fill: transparent
        font-color: blue
      }

      project-logs: Log Explorer {
        icon: ./icons/gcp/cloud_logging.svg
        shape: image
      }

      project-trace: Trace Explorer {
        icon: ./icons/gcp/trace.svg
        shape: image
      }

      project-scc: Security Command\nCenter {
        icon: ./icons/gcp/security_command_center.svg
        shape: image
      }

      project-nic: Network Intelligence\nCenter {
        icon: ./icons/gcp/network_intelligence_center.svg
        shape: image
      }
    }
  }

  org-scc: Org-level Security\nCommand Center\n(relevant project\nlogs, events, and\nsecurity posture alerts) {
    icon: ./icons/gcp/security_command_center.svg
    shape: image
  }
}

# unauthed traffic flow
unauthed-traffic -> gcp.project.clouddns: Client DNS\nlookup
unauthed-traffic -> gcp.project.region.loadbalancer: Unauthenticated\nclient request\n(HTTPS) {style: {stroke: red}}
gcp.project.region.loadbalancer -> gcp.project.region.vpc.fw.k8s.istio_ingress.ingress: "" {style: {stroke: red}}
gcp.project.region.vpc.fw.k8s.istio_ingress.ingress -> gcp.project.region.vpc.fw.k8s.server.django.svc: "" {style: {stroke: red}}
gcp.project.region.vpc.fw.k8s.server.django.svc -> gcp.project.region.vpc.fw.k8s.server.django.pods.pod1: "" {style: {stroke: red}}
gcp.project.region.vpc.fw.k8s.server.django.pods.pod1 -> active-directory: oAuth redirect\nfor SSO (HTTPS) {style: {stroke: red}}
active-directory -> authed-traffic: oAuth return\nredirect (HTTPS) {style: {stroke: red}}

# authed traffic flow
authed-traffic -> gcp.project.region.loadbalancer: Client request\nwith bearer token\n(HTTPS) {style: {stroke: green}}
gcp.project.region.loadbalancer -> gcp.project.region.vpc.fw.k8s.istio_ingress.ingress: "" {style: {stroke: green}}
gcp.project.region.vpc.fw.k8s.istio_ingress.ingress -> gcp.project.region.vpc.fw.k8s.server.django.svc: "" {style: {stroke: green}}
gcp.project.region.vpc.fw.k8s.server.django.svc -> gcp.project.region.vpc.fw.k8s.server.django.pods.pod1: "" {style: {stroke: green}}
gcp.project.region.vpc.fw.k8s.server.django.pods.pod1 -> gcp.project.region.vpc.fw.k8s.server.pg: PostgreSQL protocol\nwith mutual TLS {style: {stroke: green}}

# load balancer misc
gcp.project.region.cloudarmor -> gcp.project.region.loadbalancer: {style: {stroke: black}}

# cert management
letsencrypt <-> gcp.project.region.vpc.fw.k8s.cert-manager.certmanager-op: ACME over HTTPS {style: {stroke: orange}}
letsencrypt -> gcp.project.clouddns: ACME over HTTPS {style: {stroke: orange}}
gcp.project.region.vpc.fw.k8s.cert-manager.certmanager-op -> gcp.project.clouddns: Least priviledge service\naccount manages DNS records\n for Let's Encrypt verification (HTTPS) {style: {stroke: orange}}
gcp.project.region.vpc.fw.k8s.cert-manager.certmanager-op -> gcp.project.region.vpc.fw.k8s.istio_ingress.tls-cert: Refresh certificate {style: {stroke: orange}}
gcp.project.region.vpc.fw.k8s.istio_ingress.tls-cert -> gcp.project.region.vpc.fw.k8s.istio_ingress.ingress: TLS Cert {style: {stroke: orange}}
gcp.project.region.vpc.fw.k8s.istio_ingress.tls-cert -> gcp.project.region.loadbalancer: TLS Cert {style: {stroke: orange}}

# django pod management
gcp.project.region.vpc.fw.k8s.server.django.hpa -> gcp.project.region.vpc.fw.k8s.server.django.deploy: Scalling signals based\non cluster metrics {style: {stroke: grey}}
gcp.project.region.vpc.fw.k8s.server.django.deploy -> gcp.project.region.vpc.fw.k8s.server.django.pods: Scaling and pod\navailability management {style: {stroke: grey}}
gcp.project.region.vpc.fw.k8s.server.django.app-secrets -> gcp.project.region.vpc.fw.k8s.server.django.pods: "" {style: {stroke: grey}}

# postgres pod management
gcp.project.region.vpc.fw.k8s.server.pg.rw_svc -> gcp.project.region.vpc.fw.k8s.server.pg.primary_boundary.pod: "" {style: {stroke: black}}
gcp.project.region.vpc.fw.k8s.server.pg.ro_svc -> gcp.project.region.vpc.fw.k8s.server.pg.standby_boundary.pod: "" {style: {stroke: black}}
gcp.project.region.vpc.fw.k8s.server.pg.r_svc -> gcp.project.region.vpc.fw.k8s.server.pg.primary_boundary.pod: "" {style: {stroke: black}}
gcp.project.region.vpc.fw.k8s.server.pg.r_svc -> gcp.project.region.vpc.fw.k8s.server.pg.standby_boundary.pod: "" {style: {stroke: black}}
gcp.project.region.vpc.fw.k8s.server.pg.primary_boundary.pod -> gcp.project.region.vpc.fw.k8s.server.pg.standby_boundary.pod: "" {style: {stroke: black}}
gcp.project.region.vpc.fw.k8s.server.pg -> gcp.project.region.cloudstorage: Scheduled (nightly) and manual\nDB dumps (HTTPS) {style: {stroke: black}}

# dev notifications
slack -> devs: "" {style: {stroke: gold}}
gcp.project.region.vpc.fw.k8s.server.django.pods.pod1 -> slack: Application error\nalerts (HTTPS) {style: {stroke: gold}}
gcp.project.region.vpc.fw.k8s.flux_system -> slack: Flux system and\ncluster status\nnotifications\n (HTTPS) {style: {stroke: gold}}

# ci / cd
gcp.project.region.vpc.fw.k8s.flux_system -> gh: Pull cluster configuration\n(HTTPS) {style: {stroke: blue}}
gcp.project.region.vpc.fw.k8s.server.django.pods -> gcp.project.region.registry: Pull app image as triggered by\nFlux-managed configuration\nchanges (HTTPS) {style: {stroke: blue}}
devs <-> gh: "" {style: {stroke: green}}
gh -> gcp.project.region.cloud_build: Cloud Build trigger\non "prod" branch (HTTPS) {style: {stroke: blue}}
gcp.project.region.cloud_build -> gcp.project.region.registry: Push built app\nimage (HTTPS) {style: {stroke: blue}}

# observability
devs -> gcp.project.observability: Read access via the Google Cloud Console {style: {stroke: skyBlue}}
