# To manually trigger your cloudbuild.yaml, use:
# ```
# gcloud builds submit --config cloudbuild.yaml --substitutions COMMIT_SHA="localTrigger"
# ```


# [START cloudrun_django_cloudbuild]

steps:
  - id: "make .env.prod file"
    name: gcr.io/cloud-builders/gcloud
    script: |
      #!/usr/bin/env bash
      echo "Write .env.prod to disk for use in later steps"
      cd server && deploy/make_prod_env_file.sh

  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
    script: |
      #!/usr/bin/env bash
      cd server

      echo "Get project env vars from deploy/gcloud_env_vars.sh"
      source deploy/gcloud_env_vars.sh

      echo "Build a new application run time image"
      docker build -t ${BUILD_CLOUD_RUN_IMAGE_NAME}:${COMMIT_SHA} .

      echo "Push the new image to the project's artifact registry"
      docker push ${BUILD_CLOUD_RUN_IMAGE_NAME}:${COMMIT_SHA}

  - id: "deploy to cloud run"
    name: "gcr.io/cloud-builders/gcloud"
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
    script: |
      #!/usr/bin/env bash
      cd server

      echo "Get project env vars from deploy/gcloud_env_vars.sh"
      source deploy/gcloud_env_vars.sh

      echo "Deploy new image to Cloud Run"
      gcloud run deploy ${PROJECT_SERVICE_NAME} \
        --image ${BUILD_CLOUD_RUN_IMAGE_NAME}:${COMMIT_SHA} \
        --region ${PROJECT_REGION} \
        --add-cloudsql-instances ${DB_INSTANCE_NAME} \
        --vpc-connector ${VPC_CONNECTOR_NAME} \
        --platform managed \
        --allow-unauthenticated
# [END cloudrun_django_cloudbuild]
