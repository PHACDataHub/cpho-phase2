# To trigger manually, use `gcloud builds submit --config cloudbuild.yaml`
# Note: manual triggers differ from GitHub triggers on the available built in substitution values
# deploy/make_cloud_build_env_file.sh is responsible for providing local fallbacks as needed
# Also note: codecov will not work with manual push.


# [START cloudrun_django_cloudbuild]
steps:
  - id: "Make .env.cloud_build for subsequent steps"
    name: gcr.io/cloud-builders/gcloud
    env:
      - "BRANCH_NAME=${BRANCH_NAME}"
      - "COMMIT_SHA=${COMMIT_SHA}"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      echo "Write .env.cloud_build to disk, to provide consistent project configuration (no secrets) in subsequent steps"
      deploy/make_cloud_build_env_file.sh "${BRANCH_NAME}" "${COMMIT_SHA}"


  - id: "Build server and postgres images for testing"
    name: "gcr.io/cloud-builders/docker"
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build project configuration values"
      source .env.cloud_build

      echo "Build a new application run time image and postgres db for testing"
      docker compose up --build -d 


  - id: "Run tests and produce coverage report"
    name: 'gcr.io/cloud-builders/docker'
    volumes:
      - name: 'coverage'
        path: '/workspace/coverage'
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      echo "Run tests and create coverage report"
      source .env.cloud_build

      docker compose exec -T server pytest --cov=./server --cov-report=xml:coverage/coverage.xml
      echo `pwd`
      
      # echo "List of files in the current directory: "

      # for file in *; do
      #     echo $file
      # done
      
      # echo ""
      # echo "in server:"
      # for file in server/*; do
      #  echo "$file"
      # done
      
  - id: "Upload Test Coverage report to Codecov"
    name: "gcr.io/cloud-builders/curl"
    volumes:
    - name: 'coverage'
      path: '/workspace/coverage'
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
      - "SLUG=PHACDataHub/cpho-phase2"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      echo "Get cloud build project configuration values"
      source .env.cloud_build

      echo "Check if CODECOV_TOKEN has value ie. exists in GCP Secret Manager"
      trimmed_token=$(echo "$CODECOV_TOKEN" | tr -d '[:space:]')
      if [[ "$trimmed_token" != "" ]]; then
        
        echo "Download Codecov Cloud Uploader"
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov

        echo "Upload test coverage report to codecov"
        ./codecov -t "$CODECOV_TOKEN" --disable=detect --branch "$BRANCH_NAME" --sha "$COMMIT_SHA" 
        # -f coverage.xml -R /workspace 
        # -r
        # -r "$SLUG"  --disable=detect
        #  
        # env CI= ./codecov -t "$CODECOV_TOKEN" -B "$BRANCH_NAME" -C "$COMMIT_SHA" -R /workspace -f /workspace/coverage/coverage.xml 
        # -r "$REPO"
        # -R ~/web
        #/cpho/web
      
      else
        echo "Codecov not set up - skipping..."
      fi
  # codecov --token=X --disable=detect --commit=$COMMIT_SHA --branch=$BRANCH_NAME 
  

  - id: "Tear down from tests"
    name: 'gcr.io/cloud-builders/docker'
    env:
      - "COMMIT_SHA=$COMMIT_SHA"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      echo "docker compose down"
      docker compose down -v


  - id: "Build image if main"
    name: "gcr.io/cloud-builders/docker"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Build a new application run time image"
        docker build -t "${IMAGE_NAME_FOR_RUN}" -f ./server/Dockerfile ./server
       else
        echo "pass"
      fi
  

  - id: "Push image if main"
    name: "gcr.io/cloud-builders/docker"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Push the new image to the project's artifact registry"
        docker push "${IMAGE_NAME_FOR_RUN}"
      else
        echo "pass"
        exit 0
      fi


  - id: "Deploy to Cloud Run if main"
    name: "gcr.io/cloud-builders/gcloud"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Deploy new image to Cloud Run"
        gcloud run deploy "${PROJECT_SERVICE_NAME}" \
          --image "${IMAGE_NAME_FOR_RUN}" \
          --region "${PROJECT_REGION}" \
          --add-cloudsql-instances "${DB_INSTANCE_NAME}" \
          --vpc-connector "${VPC_CONNECTOR_NAME}" \
          --set-secrets "/secrets/.env.prod=${SKEY_PROD_ENV_FILE}:latest" \
          --platform managed \
          --allow-unauthenticated
      else
        echo "pass"
        exit 0
      fi
# [END cloudrun_django_cloudbuild]
