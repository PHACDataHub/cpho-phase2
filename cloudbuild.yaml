# To trigger manually, use `gcloud builds submit --config cloudbuild.yaml`
# Note: manual triggers differ from GitHub triggers on the available built in substitution values
# deploy/make_cloud_build_env_file.sh is responsible for providing local fallbacks as needed


# [START cloudrun_django_cloudbuild]
steps:
  - id: "Make .env.cloud_build for subsequent steps"
    name: gcr.io/cloud-builders/gcloud
    env:
      - "BRANCH_NAME=${BRANCH_NAME}"
      - "COMMIT_SHA=${COMMIT_SHA}"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      echo "Write .env.cloud_build to disk, to provide consistent project configuration (no secrets) in subsequent steps"
      deploy/make_cloud_build_env_file.sh "${BRANCH_NAME}" "${COMMIT_SHA}"

  - id: "Run tests"
    name: "gcr.io/cloud-builders/docker"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build project configuration values"
      source .env.cloud_build

      echo "Build images for testing, run tests and create report"
      docker compose -f docker-compose.run-tests.yaml up --exit-code-from server    
      # NOTE: Tests are run within docker compose. When "--exit-code-from" is used, and the build or a command fails, this flag will cause the step to fail.  
      # Test coverage reports are generated twice:
        # 1 - to terminal to be printed in Cloud Build Logs
        # 2 - to coverage.json in mounted volume.
      echo "Tear down tests"
      docker compose -f docker-compose.run-tests.yaml down -v
      
  - id: "Upload test coverage reports to Google Cloud Storage"
    name: 'gcr.io/cloud-builders/gsutil'
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset 
    
      echo "Get cloud build project configuration values"
      source .env.cloud_build 

      echo "Copy test coverage report from docker volume to a google cloud storage bucket."
      timestamp=$(date +%s)
      gsutil cp ./coverage/coverage.json "gs://${TEST_COVERAGE_BUCKET_NAME}/${BRANCH_NAME}/${timestamp}-${COMMIT_SHA}.json"

      # Install jq and bc 
      apt-get update && apt-get install -y jq bc
      
      this_commit_coverage=$(jq '.totals.percent_covered' ./coverage/coverage.json | awk '{printf "%.2f\n", $1}')
      echo ""
      echo "Report for this commit: gs://${TEST_COVERAGE_BUCKET_NAME}/${BRANCH_NAME}/${timestamp}-${COMMIT_SHA}.json"
      echo "This commit's test coverage: ${this_commit_coverage}%"
      echo ""

      echo "Retrieving coverage report for the last commit to the main GitHub deployment branch." 
      last_github_deployment_branch_coverage_report=$(gsutil ls "gs://${TEST_COVERAGE_BUCKET_NAME}/${GITHUB_MAIN_BRANCH_NAME}" | sort | tail -n 2 | head -n 1)
      
      if [ -z "${last_github_deployment_branch_coverage_report}" ]; then
        echo "No coverage reports for the main GitHub deployment branch found."
        coverage_difference=${this_commit_coverage}
      else

        # Find coverage delta between this commit and last commit to main GitHub deployment branch.
        echo "Coverage report for last commit to the main GitHub deployment branch: ${last_github_deployment_branch_coverage_report}"
        echo "Calculating test coverage for the last commit to the main GitHub deployment branch."
        
        gsutil cp ${last_github_deployment_branch_coverage_report} ./coverage/last_github_deployment_branch_coverage_report.json
        last_github_deployment_branch_coverage=$(jq '.totals.percent_covered' ./coverage/last_github_deployment_branch_coverage_report.json | awk '{printf "%.2f\n", $1}')
        echo "Master or main branch last commit's total coverage: ${last_github_deployment_branch_coverage}%"
        echo ""
        # echo "Test coverage threshold: ${TEST_COVERAGE_THRESHOLD}"
        # echo ""
        # echo "This commit's total test coverage: ${this_commit_coverage}%"

        echo ""
        coverage_difference=$(echo "${this_commit_coverage} - ${last_github_deployment_branch_coverage}" | bc)
      fi

      echo "Coverage difference: ${coverage_difference}%"

      # Compare total coverage to failure threshold.

      if (( $(echo "${this_commit_coverage} < ${TEST_COVERAGE_THRESHOLD}" | bc -l) )); then
        echo "Coverage (${this_commit_coverage}%) is below the threshold of (${TEST_COVERAGE_THRESHOLD}%) - please add more unit tests!"
        echo "For more details, read the test coverage report logged in 'Run tests' cloud build step."
        # Fail build if main branch.
        if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then  
          echo "Failing build for insufficent test coverage."  
          exit 1
        fi
      else
        echo "Coverage (${this_commit_coverage}%) is above the threshold of ${TEST_COVERAGE_THRESHOLD}". Continuing..."
      fi

  - id: "Build image if main"
    name: "gcr.io/cloud-builders/docker"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Build a new application run time image"
        docker build -t "${IMAGE_NAME_FOR_RUN}" -f ./server/Dockerfile ./server
       else
        echo "pass"
      fi

  - id: "Push image if main"
    name: "gcr.io/cloud-builders/docker"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Push the new image to the project's artifact registry"
        docker push "${IMAGE_NAME_FOR_RUN}"
      else
        echo "pass"
        exit 0
      fi

  - id: "Deploy to Cloud Run if main"
    name: "gcr.io/cloud-builders/gcloud"
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset
      
      echo "Get cloud build environment variables"
      source .env.cloud_build

      # IMPORTANT: don't just use latest. The secrets are mounted at container start, not deploy time,
      # so instances deployed with "latest" may end up using incompatable secret versions as new secret
      # versions are pushed, but before the coresponding images are pushed
      prod_env_secret_version=7

      if [[ "${BRANCH_NAME}" == "${GITHUB_MAIN_BRANCH_NAME}" ]]; then
        echo "Deploy new image to Cloud Run"
        gcloud run deploy "${PROJECT_SERVICE_NAME}" \
          --image "${IMAGE_NAME_FOR_RUN}" \
          --region "${PROJECT_REGION}" \
          --add-cloudsql-instances "${DB_INSTANCE_NAME}" \
          --vpc-connector "${VPC_CONNECTOR_NAME}" \
          --set-secrets "/secrets/.env.prod=${SKEY_PROD_ENV_FILE}:${prod_env_secret_version}" \
          --platform managed \
          --allow-unauthenticated
      else
        echo "pass"
        exit 0
      fi
# [END cloudrun_django_cloudbuild]
