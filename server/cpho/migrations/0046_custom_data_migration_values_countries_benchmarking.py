# Generated by Django 5.0.11 on 2025-02-19 19:22

from django.db import migrations


def update_value_units(apps, schema_editor):
    IndicatorDatum = apps.get_model("cpho", "IndicatorDatum")
    IndicatorDatumHistory = apps.get_model("cpho", "IndicatorDatumHistory")

    unit_updates = {
        "percent_age_standardized": "percentage",
        "percentage_crude": "percentage",
        "rate_100k_population_per_year": "rate_100k_age_standardized",
        "other": "",
    }
    for old_value, new_value in unit_updates.items():
        if new_value:
            # main table
            IndicatorDatum.objects.filter(value_unit=old_value).update(
                value_unit=new_value
            )
            # history table
            IndicatorDatumHistory.objects.filter(value_unit=old_value).update(
                value_unit=new_value
            )

            if IndicatorDatum.objects.filter(value_unit=old_value).exists():
                raise ValueError(
                    f"Failed: '{old_value}' was not updated to '{new_value}' in IndicatorDatum."
                )

            if IndicatorDatumHistory.objects.filter(
                value_unit=old_value
            ).exists():
                raise ValueError(
                    f"Failed: '{old_value}' was not updated to '{new_value}' in IndicatorDatumHistory."
                )


def benchmarking_countries_update(apps, schema_editor):
    Benchmarking = apps.get_model("cpho", "Benchmarking")
    BenchmarkingHistory = apps.get_model("cpho", "BenchmarkingHistory")
    Country = apps.get_model("cpho", "Country")

    korea = Country.objects.get(name_en="Republic of Korea")
    england_wales = Country.objects.get(name_en="England & Wales")
    uk_britain_ireland = Country.objects.get(
        name_en="United Kingdom of Great Britain and Northern Ireland"
    )
    slovakia = Country.objects.get(name_en="Slovakia")
    slovak_republic = Country.objects.get(name_en="Slovak Republic")
    uk = Country.objects.get(name_en="United Kingdom")

    country_updates = {
        korea: None,
        england_wales: uk,
        uk_britain_ireland: uk,
        slovakia: slovak_republic,
    }

    for old_country, new_country in country_updates.items():
        Benchmarking.objects.filter(oecd_country=old_country).update(
            oecd_country=new_country
        )
        BenchmarkingHistory.objects.filter(oecd_country=old_country).update(
            oecd_country=new_country
        )

        if Benchmarking.objects.filter(oecd_country=old_country).exists():
            raise ValueError(
                f"Failed: '{old_country}' was not updated to '{new_country}' in Benchmarking."
            )

        if BenchmarkingHistory.objects.filter(
            oecd_country=old_country
        ).exists():
            raise ValueError(
                f"Failed: '{old_country}' was not updated to '{new_country}' in BenchmarkingHistory."
            )

    # delete Korea Country is not history tracked
    korea.delete()
    if Country.objects.filter(name_en="Republic of Korea").exists():
        raise ValueError(f"Failed: 'Republic of Korea' was not deleted.")


def update_country_names(apps, schema_editor):
    Country = apps.get_model("cpho", "Country")

    country_renames = {"Turkey": "TÃ¼rkiye", "OECD": "OECD Average"}

    for old_name, new_name in country_renames.items():
        Country.objects.filter(name_en=old_name).update(name_en=new_name)

    for old_name, new_name in country_renames.items():
        if Country.objects.filter(name_en=old_name).exists():
            raise ValueError(
                f"failed: '{old_name}' was not renamed to '{new_name}'"
            )


def update_benchmarking_values(apps, schema_editor):
    Benchmarking = apps.get_model("cpho", "Benchmarking")
    BenchmarkingHistory = apps.get_model("cpho", "BenchmarkingHistory")

    benchmarking_updates = {
        "age_standard_rate_per_100k": "rate_per_100k_population",
        "percentage_value": "percent",
        "rate_per_100k": "rate_per_100k_population",
        "percent_children": "percent",
        "percent_population": "percent",
        "age_standard_percentage": "percent",
        "percent_births_below_2500_grams": "percent",
        "percent_population_health_good_or_very_good": "percent",
        "total_per_100k_persons": "rate_per_100k_population",
        "incidence_100k_population": "rate_per_100k_population",
    }

    for old_value, new_value in benchmarking_updates.items():
        Benchmarking.objects.filter(unit=old_value).update(unit=new_value)

        BenchmarkingHistory.objects.filter(unit=old_value).update(
            unit=new_value
        )

        if Benchmarking.objects.filter(unit=old_value).exists():
            raise ValueError(
                f"Failed: '{old_value}' was not updated in Benchmarking."
            )

        if BenchmarkingHistory.objects.filter(unit=old_value).exists():
            raise ValueError(
                f"Failed: '{old_value}' was not updated in BenchmarkingHistory."
            )


def no_op(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("cpho", "0045_indicator_table_title_grade_and_more"),
    ]

    operations = [
        migrations.RunPython(update_value_units, no_op),
        migrations.RunPython(benchmarking_countries_update, no_op),
        migrations.RunPython(update_country_names, no_op),
        migrations.RunPython(update_benchmarking_values, no_op),
    ]
